---
description: 
globs: 
alwaysApply: false
---
# Agentopia Tech Stack Document

This document explains the technologies chosen for the Agentopia project in simple, everyday language. It breaks down the frontend, backend, infrastructure, integrations, security, and performance considerations so that anyone—even non-technical readers—can understand what each component does and why it was chosen.

## Frontend Technologies

Our frontend is the face of our platform – the part users see and interact with. Here's what we are using:

*   **Streamlit**

    *   Provides a fast and straightforward way to create an interactive web interface.
    *   Ensures that administrators can easily manage agents, datastores, and integrations with a clear, data-rich dashboard.

*   **Design Guidelines**

    *   **Dark Theme & Poppins Font:** To offer a modern, stylish user experience.
    *   **Bolt (Quick Project Setup):** Helps set up the app quickly with best practices and ensures compatibility with the ecosystem.

These choices help create a clean and user-friendly interface that is not only visually appealing but also easy to navigate for tasks like configuring AI agents or managing Discord integrations.

## Backend Technologies

The backend is the engine behind Agentopia, handling all the tough work while keeping data safe and processes smooth. Our key backend technologies include:

*   **FastAPI**

    *   A modern framework for building REST APIs quickly and efficiently.
    *   Manages all application logic, handling requests from the frontend and communicating with other services.

*   **Databases and Data Storage**

    *   **PostgreSQL with pgvector via Supabase:** For storing structured data and managing user authentication securely.
    *   **Pinecone:** Supports high-performance vector searches, crucial for matching and retrieving similar data points quickly.
    *   **GetZep:** Manages graph memory, enhancing the ability of agents to remember and relate information.

*   **Business Logic and Routing Components**

    *   Clearly defined modules such as authentication, agent management, datastore operations, Discord bot operations, and integration handlers (for MCPs and LLMs like OpenAI, Anthropic, Google Gemini, and Fireworks.ai).

These components work together to manage, store, and process the data behind Agentopia ensuring every action from authentication, agent configuration, and even chat logging is reliable and effective.

## Infrastructure and Deployment

To run our application smoothly and efficiently, we've chosen robust tools and services:

*   **Hosting Platforms**

    *   **Digital Ocean:** Hosts both parts of the backend and the frontend, chosen for its reliability and ability to scale as user needs grow.
    *   **Supabase:** Not only manages our PostgreSQL database but also handles secure user authentication.

*   **Containerization and Continuous Deployment**

    *   **Docker:** Ensures consistency across different environments by encapsulating our app components into containers.
    *   **CI/CD Pipelines:** While not detailed explicitly here, our use of Docker and Git for version control enables smooth integration and deployment processes.

*   **Version Control**

    *   **Git:** Keeps track of all changes, ensuring that developments can be coordinated, tracked, and reverted if needed.

These choices ensure that our application is scalable, reliable, and easy to update as new features or fixes are introduced.

## Third-Party Integrations

Agentopia isn't built entirely from scratch – it smartly combines a range of third-party services to enhance functionality:

*   **Discord API**

    *   Integrates the platform with Discord, allowing bots to interact with users in channels, responding to messages either automatically or when tagged.

*   **LLM Providers**

    *   **OpenAI, Anthropic, Google Gemini, Fireworks.ai:** These offer varied AI models to power our agents. Depending on the task, administrators can choose the best model for the job.

*   **Model Context Processors (MCPs)**

    *   Links specialized tools that allow agents to reason more effectively through Chain of Thought (CoT) templates.

These integrations allow Agentopia to leverage industry-leading services, providing powerful AI, seamless chat experiences, and expert data retrieval without having to build every complex system from the ground up.

## Security and Performance Considerations

Keeping data secure and performance optimal is key to Agentopia:

*   **Security Measures**

    *   **User Authentication via Supabase:** Ensures that only authorized users can access the administrative functions.
    *   **API Key Management:** Uses best practices for encrypting and storing sensitive keys, ensuring that API keys for LLM providers remain confidential.
    *   **Data Encryption and Secure Storage:** Helps protect user and system data within our PostgreSQL, Pinecone, and GetZep setups.

*   **Performance Optimizations**

    *   **Vector Search Optimizations:** Utilizes Pinecone for fast and efficient vector searches.
    *   **Comprehensive Logging and Monitoring:** Every part of the system is logged, making it easier to detect any issues or bottlenecks and maintain smooth operation.
    *   **Load Testing:** Although still to be detailed in our process, our system design allows for future load testing to ensure stable performance during high interaction periods.

These practices ensure that Agentopia remains both safe to use and highly responsive, even as interactions grow in volume and complexity.

## Conclusion and Overall Tech Stack Summary

Here’s a quick recap of our technology stack and why it’s a great fit for Agentopia:

*   **Frontend:**

    *   Streamlit with dark-themed UI and Poppins font for a modern, intuitive user interface.
    *   Bolt for rapid, AI-aided project setup that guarantees best practices are followed.

*   **Backend:**

    *   FastAPI as the backbone for our REST API and core business logic.
    *   PostgreSQL (with pgvector via Supabase), Pinecone, and GetZep for powerful, scalable data storage and search capabilities.
    *   A modular design with clear separation of concerns across authentication, agent operations, datastore management, Discord interactions, and API integrations.

*   **Infrastructure and Deployment:**

    *   Digital Ocean and Supabase ensuring reliable hosting and secure, scalable operations.
    *   Docker and Git aiding in consistent deployment and robust version control practices.

*   **Third-Party Integrations:**

    *   Discord API, multiple LLM integrations (OpenAI, Anthropic, Google Gemini, Fireworks.ai), and MCP connections combining to enhance functionality and efficiency.

*   **Security and Performance:**

    *   Strong security measures, from Supabase-managed authentication to encrypted API key management, protect our data.
    *   Optimizations such as efficient vector search and comprehensive logging ensure the system remains fast and reliable under load.

The tech stack chosen for Agentopia not only meets our current technical requirements but also the scalability and security needs of a modern, AI-driven platform. Every technology here is carefully selected to provide a seamless experience for administrators managing the system and for the end-users interacting with AI agents on Discord.

This comprehensive approach differentiates Agentopia from other projects by combining state-of-the-art technologies with easy-to-manage interfaces and robust security practices, ensuring a smooth and powerful user experience.
